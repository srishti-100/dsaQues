#include <bits/stdc++.h> 
/*
bool helper(int i, int n, int sum, vector<int>& arr,vector<vector<int>>& dp){
    if(i == n){
        return false;
    }
    if(arr[i]==sum){
        return true;
    }
    if(dp[i][sum]!=-1) return dp[i][sum];
    bool ans1 = helper(i+1,n,sum,arr,dp);
    bool ans2 = false;
    if(sum>arr[i]){
        ans2 = helper(i+1,n,sum-arr[i],arr, dp);
    }
    dp[i][sum] =  ans1||ans2;

    return ans1||ans2;
}


bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here. 
    vector<vector<int>> dp(n,vector<int>(k+1,-1));
    return helper(0,n,k,arr,dp);
}
*/

bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here. 
    vector<vector<bool>> dp(n,vector<bool>(k+1,0));
    
    for(int i =0; i<n; i++){
        dp[i][0] = true;
    }
    if(arr[0]<=k)
        dp[0][arr[0]] = true;

    for(int i = 1 ; i<n; i++){
        for(int target = 1; target<=k; target++){
            bool ans1 = dp[i-1][target];
            bool ans2 = false;
            if(target>=arr[i]){
                ans2 = dp[i-1][target-arr[i]];
            }
            dp[i][target] =  ans1||ans2;

        }
    }

    return dp[n-1][k];
}

