/*
int helper(int curr,int prev,int n, vector<vector<int>>& arr){
    if(curr==n-1){
        int maxi = 0;
        for(int i =0; i<=2; i++){
            if(i!=prev){
                maxi= max(maxi,arr[curr][i]);
            }
        }
        return maxi;
    }

    int maxi = 0;
    for(int i =0; i<=2; i++){
        if(i!=prev){
            int p = arr[curr][i]+helper(curr+1,i,n,arr);
            maxi = max(maxi,p);
        }
    }
    return maxi;
}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    return helper(0,3,n,points);
}
*/
/*
int helper(int curr,int prev,int n, vector<vector<int>>& arr,vector<vector<int>>& dp)
{
    if(curr==n-1){
        int maxi = 0;
        for(int i =0; i<=2; i++){
            if(i!=prev){
                maxi= max(maxi,arr[curr][i]);
            }
        }
        return maxi;
    }
    if(dp[curr][prev]!=-1) return dp[curr][prev];
    int maxi = 0;
    for(int i =0; i<=2; i++){
        
        if(i!=prev){
            int p = arr[curr][i]+helper(curr+1,i,n,arr,dp);
            maxi = max(maxi,p);
        }
    }
    dp[curr][prev] = maxi;
    return maxi;
}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    vector<vector<int>> dp(n,vector<int>(4,-1));
    return helper(0,3,n,points,dp);
}
*/
int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.

    vector<vector<int>> dp(n,vector<int>(4,-1));
    dp[n-1][0] = max(points[n-1][1], points[n-1][2]);
    dp[n-1][1] = max(points[n-1][0], points[n-1][2]);
    dp[n-1][2] = max(points[n-1][0], points[n-1][1]);
    dp[n-1][3] = max(points[n-1][0], max(points[n-1][1], points[n-1][2]));

    for(int day = n-2; day>=0; day--){
        for (int last = 0; last < 4; last++) {
        dp[day][last] = 0;
        for (int task = 0; task <= 2; task++) {
            if (task != last) {
                int activity = points[day][task] + dp[day + 1][task];
                dp[day][last] = max(dp[day][last], activity);
                }
            }
        }

    }
    return dp[0][3];
}
